PYTHON

programming lang

  easy to learn
  large ecoysystem
  flexible
  
 used for:
  web dev
  data science
  machine learning
  AI
  web scraping
  automation (modules for CI/CD, modules for AWS, modules for monitoring, auto backups/cleanups, excel sheets auto)
  
 data types
  String
  Integer
  Float
  Boolean
  Lists
  Sets
  Dictionary
  
 py built-in fn
  stringify: str()
  casting to number: int()
  cast to set: set()
  concatenate: f"{}"
  check which data type an input is: type()
  check if value is int: .isdigit()
  return list from string: .split()
  access el list <list>[index]
  add el to list: .append(<el>)
  add el to set: .add(<el>)
  add el from list or set: .remove(<el>)
  
 variables
  dynamically typed
  use descriptive names
  
 functions
 define the fn:
  def <fn_name>(): 
    block_code
  need to call the fn:
   <fn_name>()
  can pass inputs to fn using parameters
  var only available from inside region it is created -> global scope and local scope (only accessed from inside the fn)
  can return value in fn
  
  accept user input
    input("<content>\n")
    \n : new line
  
  conditionals
    if <condition_block>:
      return <block_code>
    elif <condition_block>:
      return <block_code>
    else:
      return <block_code>
  
  try-except
    tries to execute block code and catches error if block fails
    try:
      <block_code>
    except:
      <block_code>
  
  loops
    While
      while <condition_block>:
        <block_code>
    For
      for <element> in <list>:
        <block_code>
   
   comments
     # insert comment here, single line
     """ <block> """ insert comment, multiple lines
     
   modules
    basically a .py file
    can import: import <file_name>
    if want to just import specific fn from module: from <file_name> import <fn_name>
    built-in modules are accessible out of the box
   
   third-party packages
     can find them on pypi.org
     module is python file vs package which is a collection of python modules
     pip: pkg manager
     
    classes & objects - OOP (object oriented programming)
      class is an object constructor
      blueprint for attributes and behaviors
      classes have __init__ fn - will run automatically when object is instantiated
      self is ref to current object / instance of the class
      need to pass self into all class fn / method
      one file per class
      
      almost eveything in Python is an object 
      
